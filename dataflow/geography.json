{
	"name": "geography",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlCountry",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SqlServerTable2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Country = source1@Country,",
				"          CountryCode = source1@CountryCode,",
				"          Latitude = source1@Latitude,",
				"          Longitude = source1@Longitude,",
				"          Country = source2@Country,",
				"          CountryCode = source2@CountryCode,",
				"          Latitude = source2@Latitude,",
				"          Longitude = source2@Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}